{"version":3,"sources":["components/RepetitionExercise/index.js","components/DurationExercise/index.js","components/RunningExercise/index.js","App.js","reportWebVitals.js","index.js"],"names":["RepetitionExercise","_ref","name","count","setCount","useState","React","createElement","onClick","DurationExercise","time","setTime","isRunning","setIsRunning","useEffect","interval","setInterval","prevTime","clearInterval","seconds","String","Math","floor","padStart","RunningExercise","laps","setLaps","prev","formatTime","toggleTimer","recordLap","disabled","resetTimer","length","map","lap","index","key","exercises","type","App","selectedExercise","setSelectedExercise","style","textAlign","padding","exercise","display","margin","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.ddc0e6f1.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\n//Tracks the repetitions for an exercise\nfunction RepetitionExercise({ name }) {\n  const [count, setCount] = useState(0);\n\n  return (\n    <div>\n      <h3>{name}</h3>\n      <p>Repetitions: {count}</p>\n      <button onClick={() => setCount(count + 1)}>Increase</button>\n      <button onClick={() => setCount(0)}>Reset</button>\n    </div>\n  );\n}\n\nexport default RepetitionExercise; //Exports\n","import React, { useState, useEffect } from \"react\";\n\n//Tracks time for exercise\nfunction DurationExercise({ name }) {\n  const [time, setTime] = useState(0); //Tracks in seconds\n  const [isRunning, setIsRunning] = useState(false);\n\n  //Runs timer when isRunning is true\n  useEffect(() => {\n    let interval;\n    if (isRunning) {\n      interval = setInterval(() => setTime((prevTime) => prevTime + 1), 1000);\n    } else {\n      clearInterval(interval); //Stop timer when false\n    }\n    return () => clearInterval(interval);\n  }, [isRunning]);\n\n  //Formats the timer\n  const formatTime = (seconds) => {\n    const mins = String(Math.floor(seconds / 60)).padStart(2, \"0\");\n    const secs = String(seconds % 60).padStart(2, \"0\");\n    return `${mins}:${secs}`;\n  };\n\n  return (\n    <div>\n      <h3>{name}</h3>\n      <p>Time: {formatTime(time)}</p>\n      <button onClick={() => setIsRunning(!isRunning)}>\n        {isRunning ? \"Pause\" : \"Start\"}\n      </button>\n      <button onClick={() => { setTime(0); setIsRunning(false); }}>Reset</button>\n    </div>\n  );\n}\n\nexport default DurationExercise; //Exports\n","import React, { useState } from \"react\";\n\nfunction RunningExercise({ name }) {\n  const [time, setTime] = useState(0);\n  const [isRunning, setIsRunning] = useState(false);\n  const [laps, setLaps] = useState([]);\n\n  //Start and Pause the timer\n  const toggleTimer = () => {\n    setIsRunning(!isRunning);\n  };\n\n  //Add a new lap with the current time\n  const recordLap = () => {\n    setLaps([...laps, formatTime(time)]);\n  };\n\n  //Reset the timer and clear laps\n  const resetTimer = () => {\n    setTime(0);\n    setIsRunning(false);\n    setLaps([]);\n  };\n\n  //Updates the timer every second when running\n  React.useEffect(() => {\n    let interval;\n    if (isRunning) {\n      interval = setInterval(() => setTime((prev) => prev + 1), 1000);\n    }\n    return () => clearInterval(interval);\n  }, [isRunning]);\n\n  const formatTime = (seconds) => {\n    const mins = String(Math.floor(seconds / 60)).padStart(2, \"0\");\n    const secs = String(seconds % 60).padStart(2, \"0\");\n    return `${mins}:${secs}`;\n  };\n\n  return (\n    <div>\n      <h3>{name}</h3>\n      <p>Time: {formatTime(time)}</p>\n\n      <button onClick={toggleTimer}>\n        {isRunning ? \"Pause\" : \"Start\"}\n      </button>\n      <button onClick={recordLap} disabled={!isRunning}>\n        Record Lap\n      </button>\n      <button onClick={resetTimer}>Reset</button>\n\n      {laps.length > 0 && (\n        <div>\n          <h4>Laps:</h4>\n          <ul>\n            {laps.map((lap, index) => (\n              <li key={index}>Lap {index + 1}: {lap}</li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default RunningExercise;\n","import React, { useState } from \"react\";\nimport RepetitionExercise from \"./components/RepetitionExercise\";\nimport DurationExercise from \"./components/DurationExercise\";\nimport RunningExercise from \"./components/RunningExercise\";\n\nconst exercises = [\n  { name: \"Push-ups\", type: \"repetition\" },\n  { name: \"Squats\", type: \"repetition\" },\n  { name: \"Jump Rope\", type: \"duration\" },\n  { name: \"Running\", type: \"running\" },\n];\n\nfunction App() {\n  const [selectedExercise, setSelectedExercise] = useState(null);\n\n  return (\n    <div style={{ textAlign: \"center\", padding: \"20px\" }}>\n      {selectedExercise ? (\n        <div>\n          <h2>{selectedExercise.name}</h2>\n          {selectedExercise.type === \"repetition\" ? (\n            <RepetitionExercise name={selectedExercise.name} />\n          ) : selectedExercise.type === \"duration\" ? (\n            <DurationExercise name={selectedExercise.name} />\n          ) : (\n            <RunningExercise name={selectedExercise.name} />\n          )}\n\n          <button onClick={() => setSelectedExercise(null)}>Back to Menu</button>\n        </div>\n      ) : (\n        <div>\n          <h1>Exercise Tracker</h1>\n          {exercises.map((exercise, index) => (\n            <button\n              key={index}\n              style={{ display: \"block\", margin: \"10px auto\", padding: \"10px\" }}\n              onClick={() => setSelectedExercise(exercise)}\n            >\n              {exercise.name}\n            </button>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}